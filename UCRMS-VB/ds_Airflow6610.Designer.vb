'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ds_Airflow6610"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ds_Airflow6610
    Inherits Global.System.Data.DataSet
    
    Private tableTestResults As TestResultsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TestResults")) Is Nothing) Then
                MyBase.Tables.Add(New TestResultsDataTable(ds.Tables("TestResults")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TestResults() As TestResultsDataTable
        Get
            Return Me.tableTestResults
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ds_Airflow6610 = CType(MyBase.Clone,ds_Airflow6610)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("TestResults")) Is Nothing) Then
                MyBase.Tables.Add(New TestResultsDataTable(ds.Tables("TestResults")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTestResults = CType(MyBase.Tables("TestResults"),TestResultsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTestResults) Is Nothing) Then
                Me.tableTestResults.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "ds_Airflow6610"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_Airflow6610.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTestResults = New TestResultsDataTable()
        MyBase.Tables.Add(Me.tableTestResults)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeTestResults() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ds_Airflow6610 = New ds_Airflow6610()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub TestResultsRowChangeEventHandler(ByVal sender As Object, ByVal e As TestResultsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TestResultsDataTable
        Inherits Global.System.Data.TypedTableBase(Of TestResultsRow)
        
        Private columnSecSince1904 As Global.System.Data.DataColumn
        
        Private columnDateString As Global.System.Data.DataColumn
        
        Private columnTimeString As Global.System.Data.DataColumn
        
        Private columnBName As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnPassFail As Global.System.Data.DataColumn
        
        Private columnPartNumber As Global.System.Data.DataColumn
        
        Private columnSerialNumber As Global.System.Data.DataColumn
        
        Private columnOperationDescription As Global.System.Data.DataColumn
        
        Private columnWorkOrderNumber As Global.System.Data.DataColumn
        
        Private columnOperatorID As Global.System.Data.DataColumn
        
        Private columnUnits As Global.System.Data.DataColumn
        
        Private columnTestFluid As Global.System.Data.DataColumn
        
        Private columnTestMeasureType As Global.System.Data.DataColumn
        
        Private columnNominal As Global.System.Data.DataColumn
        
        Private columnCFVPattern As Global.System.Data.DataColumn
        
        Private columnSelectedCFVs As Global.System.Data.DataColumn
        
        Private columnTestMeasureValue As Global.System.Data.DataColumn
        
        Private columnTestMeasureUnits As Global.System.Data.DataColumn
        
        Private columnUpperLimit As Global.System.Data.DataColumn
        
        Private columnLowerLimit As Global.System.Data.DataColumn
        
        Private columnMassFlowRate As Global.System.Data.DataColumn
        
        Private columnMassFlowUnits As Global.System.Data.DataColumn
        
        Private columnSetpoint As Global.System.Data.DataColumn
        
        Private columnActualSetpoint As Global.System.Data.DataColumn
        
        Private columnSetpointUnits As Global.System.Data.DataColumn
        
        Private columnPartPressure As Global.System.Data.DataColumn
        
        Private columnPartTemp As Global.System.Data.DataColumn
        
        Private columnPatm As Global.System.Data.DataColumn
        
        Private columnInletPressure As Global.System.Data.DataColumn
        
        Private columnInletTemp As Global.System.Data.DataColumn
        
        Private columnP1 As Global.System.Data.DataColumn
        
        Private columnP2 As Global.System.Data.DataColumn
        
        Private columnWaterDensity As Global.System.Data.DataColumn
        
        Private columnWaterTemp As Global.System.Data.DataColumn
        
        Private columnProbeReadings As Global.System.Data.DataColumn
        
        Private columnProbeID As Global.System.Data.DataColumn
        
        Private columnProbePF As Global.System.Data.DataColumn
        
        Private columnMasterOffset As Global.System.Data.DataColumn
        
        Private columnTestRunTime As Global.System.Data.DataColumn
        
        Private columnPerDiffNom As Global.System.Data.DataColumn
        
        Private columnSTDMassFlowRate As Global.System.Data.DataColumn
        
        Private columnPerDiffSTDMassFlow As Global.System.Data.DataColumn
        
        Private columnSTDPressure As Global.System.Data.DataColumn
        
        Private columnPerDiffSTDPressure As Global.System.Data.DataColumn
        
        Private columnSTDTestMeasure As Global.System.Data.DataColumn
        
        Private columnPerDiffSTDTestMeasure As Global.System.Data.DataColumn
        
        Private columnLeakTestMeasureValue As Global.System.Data.DataColumn
        
        Private columnLeakUpperLimit As Global.System.Data.DataColumn
        
        Private columnLeakMassFlowRate As Global.System.Data.DataColumn
        
        Private columnLeakSetpoint As Global.System.Data.DataColumn
        
        Private columnLeakPressure As Global.System.Data.DataColumn
        
        Private columnLeakPartPresT0 As Global.System.Data.DataColumn
        
        Private columnLeakPartTempT0 As Global.System.Data.DataColumn
        
        Private columnLeakPartPresT1 As Global.System.Data.DataColumn
        
        Private columnLeakPartTempT1 As Global.System.Data.DataColumn
        
        Private columnLeakDecayTime As Global.System.Data.DataColumn
        
        Private columnRestIPSetpoint As Global.System.Data.DataColumn
        
        Private columnRestPartPresDP As Global.System.Data.DataColumn
        
        Private columnCFVPartPresInitial As Global.System.Data.DataColumn
        
        Private columnCFVPartPresFinal As Global.System.Data.DataColumn
        
        Private columnCFVDecayTime As Global.System.Data.DataColumn
        
        Private columnFC500PA As Global.System.Data.DataColumn
        
        Private columnFC500PP As Global.System.Data.DataColumn
        
        Private columnFC500TP As Global.System.Data.DataColumn
        
        Private columnCustName As Global.System.Data.DataColumn
        
        Private columnCustSite As Global.System.Data.DataColumn
        
        Private columnFrame As Global.System.Data.DataColumn
        
        Private columnTech As Global.System.Data.DataColumn
        
        Private columnJobType As Global.System.Data.DataColumn
        
        Private columnAsblyType As Global.System.Data.DataColumn
        
        Private columnCmpntType As Global.System.Data.DataColumn
        
        Private columnCovers As Global.System.Data.DataColumn
        
        Private columnCondition As Global.System.Data.DataColumn
        
        Private columnPosition As Global.System.Data.DataColumn
        
        Private columnPressureUnits As Global.System.Data.DataColumn
        
        Private columnTemperatureUnits As Global.System.Data.DataColumn
        
        Private columnTestLocation As Global.System.Data.DataColumn
        
        Private columnVendorCode As Global.System.Data.DataColumn
        
        Private columnDrawing_GroupNumber As Global.System.Data.DataColumn
        
        Private columnRevisionLevel As Global.System.Data.DataColumn
        
        Private columnCalDate As Global.System.Data.DataColumn
        
        Private columnCalDueDate As Global.System.Data.DataColumn
        
        Private columnLeakInletMassFlowRate As Global.System.Data.DataColumn
        
        Private columnLeakInletPressTo As Global.System.Data.DataColumn
        
        Private columnLeakInletTempTo As Global.System.Data.DataColumn
        
        Private columnLeakInletPressTf As Global.System.Data.DataColumn
        
        Private columnLeakInletTempTf As Global.System.Data.DataColumn
        
        Private columnLeakInletLimit As Global.System.Data.DataColumn
        
        Private columnLeakInletValue As Global.System.Data.DataColumn
        
        Private columnXducerZeros As Global.System.Data.DataColumn
        
        Private columnInletLeakStr As Global.System.Data.DataColumn
        
        Private columnPartLeakStr As Global.System.Data.DataColumn
        
        Private columnP3tapID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TestResults"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SecSince1904Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecSince1904
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateStringColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateString
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TimeStringColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeString
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PassFailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassFail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PartNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SerialNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OperationDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOperationDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WorkOrderNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkOrderNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OperatorIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOperatorID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property UnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TestFluidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestFluid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TestMeasureTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestMeasureType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NominalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNominal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CFVPatternColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCFVPattern
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SelectedCFVsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelectedCFVs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TestMeasureValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestMeasureValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TestMeasureUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestMeasureUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property UpperLimitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpperLimit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LowerLimitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLowerLimit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MassFlowRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMassFlowRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MassFlowUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMassFlowUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SetpointColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSetpoint
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ActualSetpointColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActualSetpoint
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SetpointUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSetpointUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PartPressureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartPressure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PartTempColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartTemp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PatmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InletPressureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInletPressure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InletTempColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInletTemp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property P1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property P2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WaterDensityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWaterDensity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WaterTempColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWaterTemp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ProbeReadingsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProbeReadings
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ProbeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProbeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ProbePFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProbePF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MasterOffsetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMasterOffset
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TestRunTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestRunTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PerDiffNomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPerDiffNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property STDMassFlowRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTDMassFlowRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PerDiffSTDMassFlowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPerDiffSTDMassFlow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property STDPressureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTDPressure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PerDiffSTDPressureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPerDiffSTDPressure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property STDTestMeasureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTDTestMeasure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PerDiffSTDTestMeasureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPerDiffSTDTestMeasure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakTestMeasureValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakTestMeasureValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakUpperLimitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakUpperLimit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakMassFlowRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakMassFlowRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakSetpointColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakSetpoint
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakPressureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakPressure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakPartPresT0Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakPartPresT0
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakPartTempT0Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakPartTempT0
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakPartPresT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakPartPresT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakPartTempT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakPartTempT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakDecayTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakDecayTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RestIPSetpointColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRestIPSetpoint
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RestPartPresDPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRestPartPresDP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CFVPartPresInitialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCFVPartPresInitial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CFVPartPresFinalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCFVPartPresFinal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CFVDecayTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCFVDecayTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FC500PAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFC500PA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FC500PPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFC500PP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FC500TPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFC500TP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CustNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CustSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FrameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrame
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TechColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTech
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property JobTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AsblyTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAsblyType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CmpntTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmpntType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CoversColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCovers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ConditionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCondition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PressureUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPressureUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TemperatureUnitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemperatureUnits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TestLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VendorCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Drawing_GroupNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDrawing_GroupNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RevisionLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRevisionLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CalDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CalDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakInletMassFlowRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakInletMassFlowRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakInletPressToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakInletPressTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakInletTempToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakInletTempTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakInletPressTfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakInletPressTf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakInletTempTfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakInletTempTf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakInletLimitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakInletLimit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LeakInletValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeakInletValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property XducerZerosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnXducerZeros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property InletLeakStrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInletLeakStr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PartLeakStrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartLeakStr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property P3tapIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnP3tapID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TestResultsRow
            Get
                Return CType(Me.Rows(index),TestResultsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event TestResultsRowChanging As TestResultsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event TestResultsRowChanged As TestResultsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event TestResultsRowDeleting As TestResultsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event TestResultsRowDeleted As TestResultsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddTestResultsRow(ByVal row As TestResultsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddTestResultsRow( _
                    ByVal SecSince1904 As Double,  _
                    ByVal DateString As String,  _
                    ByVal TimeString As String,  _
                    ByVal BName As String,  _
                    ByVal Type As String,  _
                    ByVal PassFail As String,  _
                    ByVal PartNumber As String,  _
                    ByVal SerialNumber As String,  _
                    ByVal OperationDescription As String,  _
                    ByVal WorkOrderNumber As String,  _
                    ByVal OperatorID As String,  _
                    ByVal Units As String,  _
                    ByVal TestFluid As String,  _
                    ByVal TestMeasureType As String,  _
                    ByVal Nominal As Double,  _
                    ByVal CFVPattern As Integer,  _
                    ByVal SelectedCFVs As String,  _
                    ByVal TestMeasureValue As Double,  _
                    ByVal TestMeasureUnits As String,  _
                    ByVal UpperLimit As Double,  _
                    ByVal LowerLimit As Double,  _
                    ByVal MassFlowRate As Double,  _
                    ByVal MassFlowUnits As String,  _
                    ByVal Setpoint As Double,  _
                    ByVal ActualSetpoint As Double,  _
                    ByVal SetpointUnits As String,  _
                    ByVal PartPressure As Double,  _
                    ByVal PartTemp As Double,  _
                    ByVal Patm As Double,  _
                    ByVal InletPressure As Double,  _
                    ByVal InletTemp As Double,  _
                    ByVal P1 As Double,  _
                    ByVal P2 As Double,  _
                    ByVal WaterDensity As Double,  _
                    ByVal WaterTemp As Double,  _
                    ByVal ProbeReadings As String,  _
                    ByVal ProbeID As String,  _
                    ByVal ProbePF As String,  _
                    ByVal MasterOffset As Double,  _
                    ByVal TestRunTime As Double,  _
                    ByVal PerDiffNom As Double,  _
                    ByVal STDMassFlowRate As Double,  _
                    ByVal PerDiffSTDMassFlow As Double,  _
                    ByVal STDPressure As Double,  _
                    ByVal PerDiffSTDPressure As Double,  _
                    ByVal STDTestMeasure As Double,  _
                    ByVal PerDiffSTDTestMeasure As Double,  _
                    ByVal LeakTestMeasureValue As Double,  _
                    ByVal LeakUpperLimit As Double,  _
                    ByVal LeakMassFlowRate As Double,  _
                    ByVal LeakSetpoint As Double,  _
                    ByVal LeakPressure As Double,  _
                    ByVal LeakPartPresT0 As Double,  _
                    ByVal LeakPartTempT0 As Double,  _
                    ByVal LeakPartPresT1 As Double,  _
                    ByVal LeakPartTempT1 As Double,  _
                    ByVal LeakDecayTime As Double,  _
                    ByVal RestIPSetpoint As Double,  _
                    ByVal RestPartPresDP As Double,  _
                    ByVal CFVPartPresInitial As Double,  _
                    ByVal CFVPartPresFinal As Double,  _
                    ByVal CFVDecayTime As Double,  _
                    ByVal FC500PA As Double,  _
                    ByVal FC500PP As Double,  _
                    ByVal FC500TP As Double,  _
                    ByVal CustName As String,  _
                    ByVal CustSite As String,  _
                    ByVal Frame As String,  _
                    ByVal Tech As String,  _
                    ByVal JobType As String,  _
                    ByVal AsblyType As String,  _
                    ByVal CmpntType As String,  _
                    ByVal Covers As String,  _
                    ByVal Condition As String,  _
                    ByVal Position As String,  _
                    ByVal PressureUnits As String,  _
                    ByVal TemperatureUnits As String,  _
                    ByVal TestLocation As String,  _
                    ByVal VendorCode As String,  _
                    ByVal Drawing_GroupNumber As String,  _
                    ByVal RevisionLevel As String,  _
                    ByVal CalDate As String,  _
                    ByVal CalDueDate As String,  _
                    ByVal LeakInletMassFlowRate As Double,  _
                    ByVal LeakInletPressTo As Double,  _
                    ByVal LeakInletTempTo As Double,  _
                    ByVal LeakInletPressTf As Double,  _
                    ByVal LeakInletTempTf As Double,  _
                    ByVal LeakInletLimit As Double,  _
                    ByVal LeakInletValue As Double,  _
                    ByVal XducerZeros As String,  _
                    ByVal InletLeakStr As String,  _
                    ByVal PartLeakStr As String,  _
                    ByVal P3tapID As Double) As TestResultsRow
            Dim rowTestResultsRow As TestResultsRow = CType(Me.NewRow,TestResultsRow)
            Dim columnValuesArray() As Object = New Object() {SecSince1904, DateString, TimeString, BName, Type, PassFail, PartNumber, SerialNumber, OperationDescription, WorkOrderNumber, OperatorID, Units, TestFluid, TestMeasureType, Nominal, CFVPattern, SelectedCFVs, TestMeasureValue, TestMeasureUnits, UpperLimit, LowerLimit, MassFlowRate, MassFlowUnits, Setpoint, ActualSetpoint, SetpointUnits, PartPressure, PartTemp, Patm, InletPressure, InletTemp, P1, P2, WaterDensity, WaterTemp, ProbeReadings, ProbeID, ProbePF, MasterOffset, TestRunTime, PerDiffNom, STDMassFlowRate, PerDiffSTDMassFlow, STDPressure, PerDiffSTDPressure, STDTestMeasure, PerDiffSTDTestMeasure, LeakTestMeasureValue, LeakUpperLimit, LeakMassFlowRate, LeakSetpoint, LeakPressure, LeakPartPresT0, LeakPartTempT0, LeakPartPresT1, LeakPartTempT1, LeakDecayTime, RestIPSetpoint, RestPartPresDP, CFVPartPresInitial, CFVPartPresFinal, CFVDecayTime, FC500PA, FC500PP, FC500TP, CustName, CustSite, Frame, Tech, JobType, AsblyType, CmpntType, Covers, Condition, Position, PressureUnits, TemperatureUnits, TestLocation, VendorCode, Drawing_GroupNumber, RevisionLevel, CalDate, CalDueDate, LeakInletMassFlowRate, LeakInletPressTo, LeakInletTempTo, LeakInletPressTf, LeakInletTempTf, LeakInletLimit, LeakInletValue, XducerZeros, InletLeakStr, PartLeakStr, P3tapID}
            rowTestResultsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTestResultsRow)
            Return rowTestResultsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TestResultsDataTable = CType(MyBase.Clone,TestResultsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TestResultsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSecSince1904 = MyBase.Columns("SecSince1904")
            Me.columnDateString = MyBase.Columns("DateString")
            Me.columnTimeString = MyBase.Columns("TimeString")
            Me.columnBName = MyBase.Columns("BName")
            Me.columnType = MyBase.Columns("Type")
            Me.columnPassFail = MyBase.Columns("PassFail")
            Me.columnPartNumber = MyBase.Columns("PartNumber")
            Me.columnSerialNumber = MyBase.Columns("SerialNumber")
            Me.columnOperationDescription = MyBase.Columns("OperationDescription")
            Me.columnWorkOrderNumber = MyBase.Columns("WorkOrderNumber")
            Me.columnOperatorID = MyBase.Columns("OperatorID")
            Me.columnUnits = MyBase.Columns("Units")
            Me.columnTestFluid = MyBase.Columns("TestFluid")
            Me.columnTestMeasureType = MyBase.Columns("TestMeasureType")
            Me.columnNominal = MyBase.Columns("Nominal")
            Me.columnCFVPattern = MyBase.Columns("CFVPattern")
            Me.columnSelectedCFVs = MyBase.Columns("SelectedCFVs")
            Me.columnTestMeasureValue = MyBase.Columns("TestMeasureValue")
            Me.columnTestMeasureUnits = MyBase.Columns("TestMeasureUnits")
            Me.columnUpperLimit = MyBase.Columns("UpperLimit")
            Me.columnLowerLimit = MyBase.Columns("LowerLimit")
            Me.columnMassFlowRate = MyBase.Columns("MassFlowRate")
            Me.columnMassFlowUnits = MyBase.Columns("MassFlowUnits")
            Me.columnSetpoint = MyBase.Columns("Setpoint")
            Me.columnActualSetpoint = MyBase.Columns("ActualSetpoint")
            Me.columnSetpointUnits = MyBase.Columns("SetpointUnits")
            Me.columnPartPressure = MyBase.Columns("PartPressure")
            Me.columnPartTemp = MyBase.Columns("PartTemp")
            Me.columnPatm = MyBase.Columns("Patm")
            Me.columnInletPressure = MyBase.Columns("InletPressure")
            Me.columnInletTemp = MyBase.Columns("InletTemp")
            Me.columnP1 = MyBase.Columns("P1")
            Me.columnP2 = MyBase.Columns("P2")
            Me.columnWaterDensity = MyBase.Columns("WaterDensity")
            Me.columnWaterTemp = MyBase.Columns("WaterTemp")
            Me.columnProbeReadings = MyBase.Columns("ProbeReadings")
            Me.columnProbeID = MyBase.Columns("ProbeID")
            Me.columnProbePF = MyBase.Columns("ProbePF")
            Me.columnMasterOffset = MyBase.Columns("MasterOffset")
            Me.columnTestRunTime = MyBase.Columns("TestRunTime")
            Me.columnPerDiffNom = MyBase.Columns("PerDiffNom")
            Me.columnSTDMassFlowRate = MyBase.Columns("STDMassFlowRate")
            Me.columnPerDiffSTDMassFlow = MyBase.Columns("PerDiffSTDMassFlow")
            Me.columnSTDPressure = MyBase.Columns("STDPressure")
            Me.columnPerDiffSTDPressure = MyBase.Columns("PerDiffSTDPressure")
            Me.columnSTDTestMeasure = MyBase.Columns("STDTestMeasure")
            Me.columnPerDiffSTDTestMeasure = MyBase.Columns("PerDiffSTDTestMeasure")
            Me.columnLeakTestMeasureValue = MyBase.Columns("LeakTestMeasureValue")
            Me.columnLeakUpperLimit = MyBase.Columns("LeakUpperLimit")
            Me.columnLeakMassFlowRate = MyBase.Columns("LeakMassFlowRate")
            Me.columnLeakSetpoint = MyBase.Columns("LeakSetpoint")
            Me.columnLeakPressure = MyBase.Columns("LeakPressure")
            Me.columnLeakPartPresT0 = MyBase.Columns("LeakPartPresT0")
            Me.columnLeakPartTempT0 = MyBase.Columns("LeakPartTempT0")
            Me.columnLeakPartPresT1 = MyBase.Columns("LeakPartPresT1")
            Me.columnLeakPartTempT1 = MyBase.Columns("LeakPartTempT1")
            Me.columnLeakDecayTime = MyBase.Columns("LeakDecayTime")
            Me.columnRestIPSetpoint = MyBase.Columns("RestIPSetpoint")
            Me.columnRestPartPresDP = MyBase.Columns("RestPartPresDP")
            Me.columnCFVPartPresInitial = MyBase.Columns("CFVPartPresInitial")
            Me.columnCFVPartPresFinal = MyBase.Columns("CFVPartPresFinal")
            Me.columnCFVDecayTime = MyBase.Columns("CFVDecayTime")
            Me.columnFC500PA = MyBase.Columns("FC500PA")
            Me.columnFC500PP = MyBase.Columns("FC500PP")
            Me.columnFC500TP = MyBase.Columns("FC500TP")
            Me.columnCustName = MyBase.Columns("CustName")
            Me.columnCustSite = MyBase.Columns("CustSite")
            Me.columnFrame = MyBase.Columns("Frame")
            Me.columnTech = MyBase.Columns("Tech")
            Me.columnJobType = MyBase.Columns("JobType")
            Me.columnAsblyType = MyBase.Columns("AsblyType")
            Me.columnCmpntType = MyBase.Columns("CmpntType")
            Me.columnCovers = MyBase.Columns("Covers")
            Me.columnCondition = MyBase.Columns("Condition")
            Me.columnPosition = MyBase.Columns("Position")
            Me.columnPressureUnits = MyBase.Columns("PressureUnits")
            Me.columnTemperatureUnits = MyBase.Columns("TemperatureUnits")
            Me.columnTestLocation = MyBase.Columns("TestLocation")
            Me.columnVendorCode = MyBase.Columns("VendorCode")
            Me.columnDrawing_GroupNumber = MyBase.Columns("Drawing_GroupNumber")
            Me.columnRevisionLevel = MyBase.Columns("RevisionLevel")
            Me.columnCalDate = MyBase.Columns("CalDate")
            Me.columnCalDueDate = MyBase.Columns("CalDueDate")
            Me.columnLeakInletMassFlowRate = MyBase.Columns("LeakInletMassFlowRate")
            Me.columnLeakInletPressTo = MyBase.Columns("LeakInletPressTo")
            Me.columnLeakInletTempTo = MyBase.Columns("LeakInletTempTo")
            Me.columnLeakInletPressTf = MyBase.Columns("LeakInletPressTf")
            Me.columnLeakInletTempTf = MyBase.Columns("LeakInletTempTf")
            Me.columnLeakInletLimit = MyBase.Columns("LeakInletLimit")
            Me.columnLeakInletValue = MyBase.Columns("LeakInletValue")
            Me.columnXducerZeros = MyBase.Columns("XducerZeros")
            Me.columnInletLeakStr = MyBase.Columns("InletLeakStr")
            Me.columnPartLeakStr = MyBase.Columns("PartLeakStr")
            Me.columnP3tapID = MyBase.Columns("P3tapID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSecSince1904 = New Global.System.Data.DataColumn("SecSince1904", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecSince1904)
            Me.columnDateString = New Global.System.Data.DataColumn("DateString", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateString)
            Me.columnTimeString = New Global.System.Data.DataColumn("TimeString", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeString)
            Me.columnBName = New Global.System.Data.DataColumn("BName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBName)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnPassFail = New Global.System.Data.DataColumn("PassFail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassFail)
            Me.columnPartNumber = New Global.System.Data.DataColumn("PartNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartNumber)
            Me.columnSerialNumber = New Global.System.Data.DataColumn("SerialNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialNumber)
            Me.columnOperationDescription = New Global.System.Data.DataColumn("OperationDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOperationDescription)
            Me.columnWorkOrderNumber = New Global.System.Data.DataColumn("WorkOrderNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkOrderNumber)
            Me.columnOperatorID = New Global.System.Data.DataColumn("OperatorID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOperatorID)
            Me.columnUnits = New Global.System.Data.DataColumn("Units", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits)
            Me.columnTestFluid = New Global.System.Data.DataColumn("TestFluid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestFluid)
            Me.columnTestMeasureType = New Global.System.Data.DataColumn("TestMeasureType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestMeasureType)
            Me.columnNominal = New Global.System.Data.DataColumn("Nominal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNominal)
            Me.columnCFVPattern = New Global.System.Data.DataColumn("CFVPattern", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCFVPattern)
            Me.columnSelectedCFVs = New Global.System.Data.DataColumn("SelectedCFVs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelectedCFVs)
            Me.columnTestMeasureValue = New Global.System.Data.DataColumn("TestMeasureValue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestMeasureValue)
            Me.columnTestMeasureUnits = New Global.System.Data.DataColumn("TestMeasureUnits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestMeasureUnits)
            Me.columnUpperLimit = New Global.System.Data.DataColumn("UpperLimit", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpperLimit)
            Me.columnLowerLimit = New Global.System.Data.DataColumn("LowerLimit", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLowerLimit)
            Me.columnMassFlowRate = New Global.System.Data.DataColumn("MassFlowRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMassFlowRate)
            Me.columnMassFlowUnits = New Global.System.Data.DataColumn("MassFlowUnits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMassFlowUnits)
            Me.columnSetpoint = New Global.System.Data.DataColumn("Setpoint", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSetpoint)
            Me.columnActualSetpoint = New Global.System.Data.DataColumn("ActualSetpoint", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActualSetpoint)
            Me.columnSetpointUnits = New Global.System.Data.DataColumn("SetpointUnits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSetpointUnits)
            Me.columnPartPressure = New Global.System.Data.DataColumn("PartPressure", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartPressure)
            Me.columnPartTemp = New Global.System.Data.DataColumn("PartTemp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartTemp)
            Me.columnPatm = New Global.System.Data.DataColumn("Patm", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatm)
            Me.columnInletPressure = New Global.System.Data.DataColumn("InletPressure", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInletPressure)
            Me.columnInletTemp = New Global.System.Data.DataColumn("InletTemp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInletTemp)
            Me.columnP1 = New Global.System.Data.DataColumn("P1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP1)
            Me.columnP2 = New Global.System.Data.DataColumn("P2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP2)
            Me.columnWaterDensity = New Global.System.Data.DataColumn("WaterDensity", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWaterDensity)
            Me.columnWaterTemp = New Global.System.Data.DataColumn("WaterTemp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWaterTemp)
            Me.columnProbeReadings = New Global.System.Data.DataColumn("ProbeReadings", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProbeReadings)
            Me.columnProbeID = New Global.System.Data.DataColumn("ProbeID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProbeID)
            Me.columnProbePF = New Global.System.Data.DataColumn("ProbePF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProbePF)
            Me.columnMasterOffset = New Global.System.Data.DataColumn("MasterOffset", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMasterOffset)
            Me.columnTestRunTime = New Global.System.Data.DataColumn("TestRunTime", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestRunTime)
            Me.columnPerDiffNom = New Global.System.Data.DataColumn("PerDiffNom", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPerDiffNom)
            Me.columnSTDMassFlowRate = New Global.System.Data.DataColumn("STDMassFlowRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTDMassFlowRate)
            Me.columnPerDiffSTDMassFlow = New Global.System.Data.DataColumn("PerDiffSTDMassFlow", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPerDiffSTDMassFlow)
            Me.columnSTDPressure = New Global.System.Data.DataColumn("STDPressure", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTDPressure)
            Me.columnPerDiffSTDPressure = New Global.System.Data.DataColumn("PerDiffSTDPressure", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPerDiffSTDPressure)
            Me.columnSTDTestMeasure = New Global.System.Data.DataColumn("STDTestMeasure", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTDTestMeasure)
            Me.columnPerDiffSTDTestMeasure = New Global.System.Data.DataColumn("PerDiffSTDTestMeasure", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPerDiffSTDTestMeasure)
            Me.columnLeakTestMeasureValue = New Global.System.Data.DataColumn("LeakTestMeasureValue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakTestMeasureValue)
            Me.columnLeakUpperLimit = New Global.System.Data.DataColumn("LeakUpperLimit", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakUpperLimit)
            Me.columnLeakMassFlowRate = New Global.System.Data.DataColumn("LeakMassFlowRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakMassFlowRate)
            Me.columnLeakSetpoint = New Global.System.Data.DataColumn("LeakSetpoint", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakSetpoint)
            Me.columnLeakPressure = New Global.System.Data.DataColumn("LeakPressure", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakPressure)
            Me.columnLeakPartPresT0 = New Global.System.Data.DataColumn("LeakPartPresT0", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakPartPresT0)
            Me.columnLeakPartTempT0 = New Global.System.Data.DataColumn("LeakPartTempT0", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakPartTempT0)
            Me.columnLeakPartPresT1 = New Global.System.Data.DataColumn("LeakPartPresT1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakPartPresT1)
            Me.columnLeakPartTempT1 = New Global.System.Data.DataColumn("LeakPartTempT1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakPartTempT1)
            Me.columnLeakDecayTime = New Global.System.Data.DataColumn("LeakDecayTime", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakDecayTime)
            Me.columnRestIPSetpoint = New Global.System.Data.DataColumn("RestIPSetpoint", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRestIPSetpoint)
            Me.columnRestPartPresDP = New Global.System.Data.DataColumn("RestPartPresDP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRestPartPresDP)
            Me.columnCFVPartPresInitial = New Global.System.Data.DataColumn("CFVPartPresInitial", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCFVPartPresInitial)
            Me.columnCFVPartPresFinal = New Global.System.Data.DataColumn("CFVPartPresFinal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCFVPartPresFinal)
            Me.columnCFVDecayTime = New Global.System.Data.DataColumn("CFVDecayTime", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCFVDecayTime)
            Me.columnFC500PA = New Global.System.Data.DataColumn("FC500PA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFC500PA)
            Me.columnFC500PP = New Global.System.Data.DataColumn("FC500PP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFC500PP)
            Me.columnFC500TP = New Global.System.Data.DataColumn("FC500TP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFC500TP)
            Me.columnCustName = New Global.System.Data.DataColumn("CustName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustName)
            Me.columnCustSite = New Global.System.Data.DataColumn("CustSite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustSite)
            Me.columnFrame = New Global.System.Data.DataColumn("Frame", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrame)
            Me.columnTech = New Global.System.Data.DataColumn("Tech", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTech)
            Me.columnJobType = New Global.System.Data.DataColumn("JobType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobType)
            Me.columnAsblyType = New Global.System.Data.DataColumn("AsblyType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAsblyType)
            Me.columnCmpntType = New Global.System.Data.DataColumn("CmpntType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmpntType)
            Me.columnCovers = New Global.System.Data.DataColumn("Covers", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCovers)
            Me.columnCondition = New Global.System.Data.DataColumn("Condition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCondition)
            Me.columnPosition = New Global.System.Data.DataColumn("Position", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosition)
            Me.columnPressureUnits = New Global.System.Data.DataColumn("PressureUnits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPressureUnits)
            Me.columnTemperatureUnits = New Global.System.Data.DataColumn("TemperatureUnits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemperatureUnits)
            Me.columnTestLocation = New Global.System.Data.DataColumn("TestLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestLocation)
            Me.columnVendorCode = New Global.System.Data.DataColumn("VendorCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorCode)
            Me.columnDrawing_GroupNumber = New Global.System.Data.DataColumn("Drawing_GroupNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDrawing_GroupNumber)
            Me.columnRevisionLevel = New Global.System.Data.DataColumn("RevisionLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRevisionLevel)
            Me.columnCalDate = New Global.System.Data.DataColumn("CalDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalDate)
            Me.columnCalDueDate = New Global.System.Data.DataColumn("CalDueDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalDueDate)
            Me.columnLeakInletMassFlowRate = New Global.System.Data.DataColumn("LeakInletMassFlowRate", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakInletMassFlowRate)
            Me.columnLeakInletPressTo = New Global.System.Data.DataColumn("LeakInletPressTo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakInletPressTo)
            Me.columnLeakInletTempTo = New Global.System.Data.DataColumn("LeakInletTempTo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakInletTempTo)
            Me.columnLeakInletPressTf = New Global.System.Data.DataColumn("LeakInletPressTf", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakInletPressTf)
            Me.columnLeakInletTempTf = New Global.System.Data.DataColumn("LeakInletTempTf", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakInletTempTf)
            Me.columnLeakInletLimit = New Global.System.Data.DataColumn("LeakInletLimit", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakInletLimit)
            Me.columnLeakInletValue = New Global.System.Data.DataColumn("LeakInletValue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeakInletValue)
            Me.columnXducerZeros = New Global.System.Data.DataColumn("XducerZeros", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnXducerZeros)
            Me.columnInletLeakStr = New Global.System.Data.DataColumn("InletLeakStr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInletLeakStr)
            Me.columnPartLeakStr = New Global.System.Data.DataColumn("PartLeakStr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartLeakStr)
            Me.columnP3tapID = New Global.System.Data.DataColumn("P3tapID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP3tapID)
            Me.columnDateString.MaxLength = 50
            Me.columnTimeString.MaxLength = 50
            Me.columnBName.MaxLength = 50
            Me.columnType.MaxLength = 50
            Me.columnPassFail.MaxLength = 10
            Me.columnPartNumber.MaxLength = 50
            Me.columnSerialNumber.MaxLength = 50
            Me.columnOperationDescription.MaxLength = 100
            Me.columnWorkOrderNumber.MaxLength = 50
            Me.columnOperatorID.MaxLength = 50
            Me.columnUnits.MaxLength = 10
            Me.columnTestFluid.MaxLength = 50
            Me.columnTestMeasureType.MaxLength = 10
            Me.columnSelectedCFVs.MaxLength = 255
            Me.columnTestMeasureUnits.MaxLength = 50
            Me.columnMassFlowUnits.MaxLength = 50
            Me.columnSetpointUnits.MaxLength = 50
            Me.columnProbeReadings.MaxLength = 536870910
            Me.columnProbeID.MaxLength = 536870910
            Me.columnProbePF.MaxLength = 536870910
            Me.columnCustName.MaxLength = 25
            Me.columnCustSite.MaxLength = 25
            Me.columnFrame.MaxLength = 20
            Me.columnTech.MaxLength = 10
            Me.columnJobType.MaxLength = 5
            Me.columnAsblyType.MaxLength = 2
            Me.columnCmpntType.MaxLength = 3
            Me.columnCovers.MaxLength = 2
            Me.columnCondition.MaxLength = 5
            Me.columnPosition.MaxLength = 2
            Me.columnPressureUnits.MaxLength = 50
            Me.columnTemperatureUnits.MaxLength = 50
            Me.columnTestLocation.MaxLength = 50
            Me.columnVendorCode.MaxLength = 50
            Me.columnDrawing_GroupNumber.MaxLength = 50
            Me.columnRevisionLevel.MaxLength = 50
            Me.columnCalDate.MaxLength = 50
            Me.columnCalDueDate.MaxLength = 50
            Me.columnXducerZeros.MaxLength = 255
            Me.columnInletLeakStr.MaxLength = 255
            Me.columnPartLeakStr.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewTestResultsRow() As TestResultsRow
            Return CType(Me.NewRow,TestResultsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TestResultsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TestResultsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TestResultsRowChangedEvent) Is Nothing) Then
                RaiseEvent TestResultsRowChanged(Me, New TestResultsRowChangeEvent(CType(e.Row,TestResultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TestResultsRowChangingEvent) Is Nothing) Then
                RaiseEvent TestResultsRowChanging(Me, New TestResultsRowChangeEvent(CType(e.Row,TestResultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TestResultsRowDeletedEvent) Is Nothing) Then
                RaiseEvent TestResultsRowDeleted(Me, New TestResultsRowChangeEvent(CType(e.Row,TestResultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TestResultsRowDeletingEvent) Is Nothing) Then
                RaiseEvent TestResultsRowDeleting(Me, New TestResultsRowChangeEvent(CType(e.Row,TestResultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveTestResultsRow(ByVal row As TestResultsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ds_Airflow6610 = New ds_Airflow6610()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TestResultsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TestResultsRow
        Inherits Global.System.Data.DataRow
        
        Private tableTestResults As TestResultsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTestResults = CType(Me.Table,TestResultsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SecSince1904() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.SecSince1904Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecSince1904' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.SecSince1904Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateString() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.DateStringColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateString' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.DateStringColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TimeString() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.TimeStringColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeString' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.TimeStringColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.BNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BName' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.BNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PassFail() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PassFailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PassFail' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PassFailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PartNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PartNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartNumber' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PartNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SerialNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.SerialNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerialNumber' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.SerialNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property OperationDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.OperationDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OperationDescription' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.OperationDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WorkOrderNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.WorkOrderNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkOrderNumber' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.WorkOrderNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property OperatorID() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.OperatorIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OperatorID' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.OperatorIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Units() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.UnitsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Units' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.UnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TestFluid() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.TestFluidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestFluid' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.TestFluidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TestMeasureType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.TestMeasureTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestMeasureType' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.TestMeasureTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Nominal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.NominalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nominal' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.NominalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CFVPattern() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.CFVPatternColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CFVPattern' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.CFVPatternColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SelectedCFVs() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.SelectedCFVsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SelectedCFVs' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.SelectedCFVsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TestMeasureValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.TestMeasureValueColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestMeasureValue' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.TestMeasureValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TestMeasureUnits() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.TestMeasureUnitsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestMeasureUnits' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.TestMeasureUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UpperLimit() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.UpperLimitColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UpperLimit' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.UpperLimitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LowerLimit() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LowerLimitColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LowerLimit' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LowerLimitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MassFlowRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.MassFlowRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MassFlowRate' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.MassFlowRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MassFlowUnits() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.MassFlowUnitsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MassFlowUnits' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.MassFlowUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Setpoint() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.SetpointColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Setpoint' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.SetpointColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ActualSetpoint() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.ActualSetpointColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActualSetpoint' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.ActualSetpointColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SetpointUnits() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.SetpointUnitsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SetpointUnits' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.SetpointUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PartPressure() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PartPressureColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartPressure' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PartPressureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PartTemp() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PartTempColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartTemp' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PartTempColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Patm() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PatmColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Patm' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PatmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InletPressure() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.InletPressureColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InletPressure' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.InletPressureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InletTemp() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.InletTempColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InletTemp' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.InletTempColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property P1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.P1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'P1' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.P1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property P2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.P2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'P2' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.P2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WaterDensity() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.WaterDensityColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WaterDensity' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.WaterDensityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WaterTemp() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.WaterTempColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WaterTemp' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.WaterTempColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ProbeReadings() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.ProbeReadingsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProbeReadings' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.ProbeReadingsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ProbeID() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.ProbeIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProbeID' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.ProbeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ProbePF() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.ProbePFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProbePF' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.ProbePFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MasterOffset() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.MasterOffsetColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MasterOffset' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.MasterOffsetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TestRunTime() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.TestRunTimeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestRunTime' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.TestRunTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PerDiffNom() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PerDiffNomColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PerDiffNom' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PerDiffNomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property STDMassFlowRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.STDMassFlowRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STDMassFlowRate' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.STDMassFlowRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PerDiffSTDMassFlow() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PerDiffSTDMassFlowColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PerDiffSTDMassFlow' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PerDiffSTDMassFlowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property STDPressure() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.STDPressureColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STDPressure' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.STDPressureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PerDiffSTDPressure() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PerDiffSTDPressureColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PerDiffSTDPressure' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PerDiffSTDPressureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property STDTestMeasure() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.STDTestMeasureColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STDTestMeasure' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.STDTestMeasureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PerDiffSTDTestMeasure() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PerDiffSTDTestMeasureColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PerDiffSTDTestMeasure' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PerDiffSTDTestMeasureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakTestMeasureValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakTestMeasureValueColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakTestMeasureValue' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakTestMeasureValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakUpperLimit() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakUpperLimitColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakUpperLimit' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakUpperLimitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakMassFlowRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakMassFlowRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakMassFlowRate' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakMassFlowRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakSetpoint() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakSetpointColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakSetpoint' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakSetpointColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakPressure() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakPressureColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakPressure' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakPressureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakPartPresT0() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakPartPresT0Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakPartPresT0' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakPartPresT0Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakPartTempT0() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakPartTempT0Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakPartTempT0' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakPartTempT0Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakPartPresT1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakPartPresT1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakPartPresT1' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakPartPresT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakPartTempT1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakPartTempT1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakPartTempT1' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakPartTempT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakDecayTime() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakDecayTimeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakDecayTime' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakDecayTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RestIPSetpoint() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.RestIPSetpointColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RestIPSetpoint' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.RestIPSetpointColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RestPartPresDP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.RestPartPresDPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RestPartPresDP' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.RestPartPresDPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CFVPartPresInitial() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.CFVPartPresInitialColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CFVPartPresInitial' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.CFVPartPresInitialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CFVPartPresFinal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.CFVPartPresFinalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CFVPartPresFinal' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.CFVPartPresFinalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CFVDecayTime() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.CFVDecayTimeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CFVDecayTime' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.CFVDecayTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FC500PA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.FC500PAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FC500PA' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.FC500PAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FC500PP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.FC500PPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FC500PP' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.FC500PPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FC500TP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.FC500TPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FC500TP' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.FC500TPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CustName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.CustNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustName' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.CustNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CustSite() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.CustSiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustSite' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.CustSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Frame() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.FrameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Frame' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.FrameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Tech() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.TechColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tech' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.TechColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property JobType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.JobTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobType' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.JobTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AsblyType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.AsblyTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AsblyType' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.AsblyTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CmpntType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.CmpntTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmpntType' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.CmpntTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Covers() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.CoversColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Covers' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.CoversColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Condition() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.ConditionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Condition' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.ConditionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Position() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PositionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Position' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PressureUnits() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PressureUnitsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PressureUnits' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PressureUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TemperatureUnits() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.TemperatureUnitsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TemperatureUnits' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.TemperatureUnitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TestLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.TestLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestLocation' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.TestLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VendorCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.VendorCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VendorCode' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.VendorCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Drawing_GroupNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.Drawing_GroupNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Drawing_GroupNumber' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.Drawing_GroupNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RevisionLevel() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.RevisionLevelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RevisionLevel' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.RevisionLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CalDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.CalDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CalDate' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.CalDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CalDueDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.CalDueDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CalDueDate' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.CalDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakInletMassFlowRate() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakInletMassFlowRateColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakInletMassFlowRate' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakInletMassFlowRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakInletPressTo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakInletPressToColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakInletPressTo' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakInletPressToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakInletTempTo() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakInletTempToColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakInletTempTo' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakInletTempToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakInletPressTf() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakInletPressTfColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakInletPressTf' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakInletPressTfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakInletTempTf() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakInletTempTfColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakInletTempTf' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakInletTempTfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakInletLimit() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakInletLimitColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakInletLimit' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakInletLimitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LeakInletValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.LeakInletValueColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeakInletValue' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.LeakInletValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property XducerZeros() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.XducerZerosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'XducerZeros' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.XducerZerosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property InletLeakStr() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.InletLeakStrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InletLeakStr' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.InletLeakStrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PartLeakStr() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.PartLeakStrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartLeakStr' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.PartLeakStrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property P3tapID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTestResults.P3tapIDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'P3tapID' in table 'TestResults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestResults.P3tapIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSecSince1904Null() As Boolean
            Return Me.IsNull(Me.tableTestResults.SecSince1904Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSecSince1904Null()
            Me(Me.tableTestResults.SecSince1904Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDateStringNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.DateStringColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDateStringNull()
            Me(Me.tableTestResults.DateStringColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTimeStringNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.TimeStringColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTimeStringNull()
            Me(Me.tableTestResults.TimeStringColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBNameNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.BNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBNameNull()
            Me(Me.tableTestResults.BNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tableTestResults.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPassFailNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PassFailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPassFailNull()
            Me(Me.tableTestResults.PassFailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPartNumberNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PartNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPartNumberNull()
            Me(Me.tableTestResults.PartNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSerialNumberNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.SerialNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSerialNumberNull()
            Me(Me.tableTestResults.SerialNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOperationDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.OperationDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOperationDescriptionNull()
            Me(Me.tableTestResults.OperationDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWorkOrderNumberNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.WorkOrderNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWorkOrderNumberNull()
            Me(Me.tableTestResults.WorkOrderNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOperatorIDNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.OperatorIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOperatorIDNull()
            Me(Me.tableTestResults.OperatorIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsUnitsNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.UnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetUnitsNull()
            Me(Me.tableTestResults.UnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTestFluidNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.TestFluidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTestFluidNull()
            Me(Me.tableTestResults.TestFluidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTestMeasureTypeNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.TestMeasureTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTestMeasureTypeNull()
            Me(Me.tableTestResults.TestMeasureTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNominalNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.NominalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNominalNull()
            Me(Me.tableTestResults.NominalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCFVPatternNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.CFVPatternColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCFVPatternNull()
            Me(Me.tableTestResults.CFVPatternColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSelectedCFVsNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.SelectedCFVsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSelectedCFVsNull()
            Me(Me.tableTestResults.SelectedCFVsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTestMeasureValueNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.TestMeasureValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTestMeasureValueNull()
            Me(Me.tableTestResults.TestMeasureValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTestMeasureUnitsNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.TestMeasureUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTestMeasureUnitsNull()
            Me(Me.tableTestResults.TestMeasureUnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsUpperLimitNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.UpperLimitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetUpperLimitNull()
            Me(Me.tableTestResults.UpperLimitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLowerLimitNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LowerLimitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLowerLimitNull()
            Me(Me.tableTestResults.LowerLimitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMassFlowRateNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.MassFlowRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMassFlowRateNull()
            Me(Me.tableTestResults.MassFlowRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMassFlowUnitsNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.MassFlowUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMassFlowUnitsNull()
            Me(Me.tableTestResults.MassFlowUnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSetpointNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.SetpointColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSetpointNull()
            Me(Me.tableTestResults.SetpointColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsActualSetpointNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.ActualSetpointColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetActualSetpointNull()
            Me(Me.tableTestResults.ActualSetpointColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSetpointUnitsNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.SetpointUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSetpointUnitsNull()
            Me(Me.tableTestResults.SetpointUnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPartPressureNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PartPressureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPartPressureNull()
            Me(Me.tableTestResults.PartPressureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPartTempNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PartTempColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPartTempNull()
            Me(Me.tableTestResults.PartTempColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPatmNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PatmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPatmNull()
            Me(Me.tableTestResults.PatmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInletPressureNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.InletPressureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInletPressureNull()
            Me(Me.tableTestResults.InletPressureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInletTempNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.InletTempColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInletTempNull()
            Me(Me.tableTestResults.InletTempColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsP1Null() As Boolean
            Return Me.IsNull(Me.tableTestResults.P1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetP1Null()
            Me(Me.tableTestResults.P1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsP2Null() As Boolean
            Return Me.IsNull(Me.tableTestResults.P2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetP2Null()
            Me(Me.tableTestResults.P2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWaterDensityNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.WaterDensityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWaterDensityNull()
            Me(Me.tableTestResults.WaterDensityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWaterTempNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.WaterTempColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWaterTempNull()
            Me(Me.tableTestResults.WaterTempColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsProbeReadingsNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.ProbeReadingsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetProbeReadingsNull()
            Me(Me.tableTestResults.ProbeReadingsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsProbeIDNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.ProbeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetProbeIDNull()
            Me(Me.tableTestResults.ProbeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsProbePFNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.ProbePFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetProbePFNull()
            Me(Me.tableTestResults.ProbePFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMasterOffsetNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.MasterOffsetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMasterOffsetNull()
            Me(Me.tableTestResults.MasterOffsetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTestRunTimeNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.TestRunTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTestRunTimeNull()
            Me(Me.tableTestResults.TestRunTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPerDiffNomNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PerDiffNomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPerDiffNomNull()
            Me(Me.tableTestResults.PerDiffNomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSTDMassFlowRateNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.STDMassFlowRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSTDMassFlowRateNull()
            Me(Me.tableTestResults.STDMassFlowRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPerDiffSTDMassFlowNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PerDiffSTDMassFlowColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPerDiffSTDMassFlowNull()
            Me(Me.tableTestResults.PerDiffSTDMassFlowColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSTDPressureNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.STDPressureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSTDPressureNull()
            Me(Me.tableTestResults.STDPressureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPerDiffSTDPressureNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PerDiffSTDPressureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPerDiffSTDPressureNull()
            Me(Me.tableTestResults.PerDiffSTDPressureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSTDTestMeasureNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.STDTestMeasureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSTDTestMeasureNull()
            Me(Me.tableTestResults.STDTestMeasureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPerDiffSTDTestMeasureNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PerDiffSTDTestMeasureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPerDiffSTDTestMeasureNull()
            Me(Me.tableTestResults.PerDiffSTDTestMeasureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakTestMeasureValueNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakTestMeasureValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakTestMeasureValueNull()
            Me(Me.tableTestResults.LeakTestMeasureValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakUpperLimitNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakUpperLimitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakUpperLimitNull()
            Me(Me.tableTestResults.LeakUpperLimitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakMassFlowRateNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakMassFlowRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakMassFlowRateNull()
            Me(Me.tableTestResults.LeakMassFlowRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakSetpointNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakSetpointColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakSetpointNull()
            Me(Me.tableTestResults.LeakSetpointColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakPressureNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakPressureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakPressureNull()
            Me(Me.tableTestResults.LeakPressureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakPartPresT0Null() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakPartPresT0Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakPartPresT0Null()
            Me(Me.tableTestResults.LeakPartPresT0Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakPartTempT0Null() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakPartTempT0Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakPartTempT0Null()
            Me(Me.tableTestResults.LeakPartTempT0Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakPartPresT1Null() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakPartPresT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakPartPresT1Null()
            Me(Me.tableTestResults.LeakPartPresT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakPartTempT1Null() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakPartTempT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakPartTempT1Null()
            Me(Me.tableTestResults.LeakPartTempT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakDecayTimeNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakDecayTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakDecayTimeNull()
            Me(Me.tableTestResults.LeakDecayTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRestIPSetpointNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.RestIPSetpointColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRestIPSetpointNull()
            Me(Me.tableTestResults.RestIPSetpointColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRestPartPresDPNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.RestPartPresDPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRestPartPresDPNull()
            Me(Me.tableTestResults.RestPartPresDPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCFVPartPresInitialNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.CFVPartPresInitialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCFVPartPresInitialNull()
            Me(Me.tableTestResults.CFVPartPresInitialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCFVPartPresFinalNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.CFVPartPresFinalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCFVPartPresFinalNull()
            Me(Me.tableTestResults.CFVPartPresFinalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCFVDecayTimeNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.CFVDecayTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCFVDecayTimeNull()
            Me(Me.tableTestResults.CFVDecayTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFC500PANull() As Boolean
            Return Me.IsNull(Me.tableTestResults.FC500PAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFC500PANull()
            Me(Me.tableTestResults.FC500PAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFC500PPNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.FC500PPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFC500PPNull()
            Me(Me.tableTestResults.FC500PPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFC500TPNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.FC500TPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFC500TPNull()
            Me(Me.tableTestResults.FC500TPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCustNameNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.CustNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCustNameNull()
            Me(Me.tableTestResults.CustNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCustSiteNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.CustSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCustSiteNull()
            Me(Me.tableTestResults.CustSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFrameNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.FrameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFrameNull()
            Me(Me.tableTestResults.FrameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTechNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.TechColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTechNull()
            Me(Me.tableTestResults.TechColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsJobTypeNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.JobTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetJobTypeNull()
            Me(Me.tableTestResults.JobTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAsblyTypeNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.AsblyTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAsblyTypeNull()
            Me(Me.tableTestResults.AsblyTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCmpntTypeNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.CmpntTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCmpntTypeNull()
            Me(Me.tableTestResults.CmpntTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCoversNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.CoversColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCoversNull()
            Me(Me.tableTestResults.CoversColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsConditionNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.ConditionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetConditionNull()
            Me(Me.tableTestResults.ConditionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPositionNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PositionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPositionNull()
            Me(Me.tableTestResults.PositionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPressureUnitsNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PressureUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPressureUnitsNull()
            Me(Me.tableTestResults.PressureUnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTemperatureUnitsNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.TemperatureUnitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTemperatureUnitsNull()
            Me(Me.tableTestResults.TemperatureUnitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTestLocationNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.TestLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTestLocationNull()
            Me(Me.tableTestResults.TestLocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsVendorCodeNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.VendorCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetVendorCodeNull()
            Me(Me.tableTestResults.VendorCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDrawing_GroupNumberNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.Drawing_GroupNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDrawing_GroupNumberNull()
            Me(Me.tableTestResults.Drawing_GroupNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRevisionLevelNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.RevisionLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRevisionLevelNull()
            Me(Me.tableTestResults.RevisionLevelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCalDateNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.CalDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCalDateNull()
            Me(Me.tableTestResults.CalDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCalDueDateNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.CalDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCalDueDateNull()
            Me(Me.tableTestResults.CalDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakInletMassFlowRateNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakInletMassFlowRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakInletMassFlowRateNull()
            Me(Me.tableTestResults.LeakInletMassFlowRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakInletPressToNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakInletPressToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakInletPressToNull()
            Me(Me.tableTestResults.LeakInletPressToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakInletTempToNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakInletTempToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakInletTempToNull()
            Me(Me.tableTestResults.LeakInletTempToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakInletPressTfNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakInletPressTfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakInletPressTfNull()
            Me(Me.tableTestResults.LeakInletPressTfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakInletTempTfNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakInletTempTfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakInletTempTfNull()
            Me(Me.tableTestResults.LeakInletTempTfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakInletLimitNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakInletLimitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakInletLimitNull()
            Me(Me.tableTestResults.LeakInletLimitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLeakInletValueNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.LeakInletValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLeakInletValueNull()
            Me(Me.tableTestResults.LeakInletValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsXducerZerosNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.XducerZerosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetXducerZerosNull()
            Me(Me.tableTestResults.XducerZerosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsInletLeakStrNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.InletLeakStrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetInletLeakStrNull()
            Me(Me.tableTestResults.InletLeakStrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPartLeakStrNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.PartLeakStrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPartLeakStrNull()
            Me(Me.tableTestResults.PartLeakStrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsP3tapIDNull() As Boolean
            Return Me.IsNull(Me.tableTestResults.P3tapIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetP3tapIDNull()
            Me(Me.tableTestResults.P3tapIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class TestResultsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TestResultsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As TestResultsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As TestResultsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ds_Airflow6610TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TestResultsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TestResults"
            tableMapping.ColumnMappings.Add("SecSince1904", "SecSince1904")
            tableMapping.ColumnMappings.Add("DateString", "DateString")
            tableMapping.ColumnMappings.Add("TimeString", "TimeString")
            tableMapping.ColumnMappings.Add("BName", "BName")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("PassFail", "PassFail")
            tableMapping.ColumnMappings.Add("PartNumber", "PartNumber")
            tableMapping.ColumnMappings.Add("SerialNumber", "SerialNumber")
            tableMapping.ColumnMappings.Add("OperationDescription", "OperationDescription")
            tableMapping.ColumnMappings.Add("WorkOrderNumber", "WorkOrderNumber")
            tableMapping.ColumnMappings.Add("OperatorID", "OperatorID")
            tableMapping.ColumnMappings.Add("Units", "Units")
            tableMapping.ColumnMappings.Add("TestFluid", "TestFluid")
            tableMapping.ColumnMappings.Add("TestMeasureType", "TestMeasureType")
            tableMapping.ColumnMappings.Add("Nominal", "Nominal")
            tableMapping.ColumnMappings.Add("CFVPattern", "CFVPattern")
            tableMapping.ColumnMappings.Add("SelectedCFVs", "SelectedCFVs")
            tableMapping.ColumnMappings.Add("TestMeasureValue", "TestMeasureValue")
            tableMapping.ColumnMappings.Add("TestMeasureUnits", "TestMeasureUnits")
            tableMapping.ColumnMappings.Add("UpperLimit", "UpperLimit")
            tableMapping.ColumnMappings.Add("LowerLimit", "LowerLimit")
            tableMapping.ColumnMappings.Add("MassFlowRate", "MassFlowRate")
            tableMapping.ColumnMappings.Add("MassFlowUnits", "MassFlowUnits")
            tableMapping.ColumnMappings.Add("Setpoint", "Setpoint")
            tableMapping.ColumnMappings.Add("ActualSetpoint", "ActualSetpoint")
            tableMapping.ColumnMappings.Add("SetpointUnits", "SetpointUnits")
            tableMapping.ColumnMappings.Add("PartPressure", "PartPressure")
            tableMapping.ColumnMappings.Add("PartTemp", "PartTemp")
            tableMapping.ColumnMappings.Add("Patm", "Patm")
            tableMapping.ColumnMappings.Add("InletPressure", "InletPressure")
            tableMapping.ColumnMappings.Add("InletTemp", "InletTemp")
            tableMapping.ColumnMappings.Add("P1", "P1")
            tableMapping.ColumnMappings.Add("P2", "P2")
            tableMapping.ColumnMappings.Add("WaterDensity", "WaterDensity")
            tableMapping.ColumnMappings.Add("WaterTemp", "WaterTemp")
            tableMapping.ColumnMappings.Add("ProbeReadings", "ProbeReadings")
            tableMapping.ColumnMappings.Add("ProbeID", "ProbeID")
            tableMapping.ColumnMappings.Add("ProbePF", "ProbePF")
            tableMapping.ColumnMappings.Add("MasterOffset", "MasterOffset")
            tableMapping.ColumnMappings.Add("TestRunTime", "TestRunTime")
            tableMapping.ColumnMappings.Add("PerDiffNom", "PerDiffNom")
            tableMapping.ColumnMappings.Add("STDMassFlowRate", "STDMassFlowRate")
            tableMapping.ColumnMappings.Add("PerDiffSTDMassFlow", "PerDiffSTDMassFlow")
            tableMapping.ColumnMappings.Add("STDPressure", "STDPressure")
            tableMapping.ColumnMappings.Add("PerDiffSTDPressure", "PerDiffSTDPressure")
            tableMapping.ColumnMappings.Add("STDTestMeasure", "STDTestMeasure")
            tableMapping.ColumnMappings.Add("PerDiffSTDTestMeasure", "PerDiffSTDTestMeasure")
            tableMapping.ColumnMappings.Add("LeakTestMeasureValue", "LeakTestMeasureValue")
            tableMapping.ColumnMappings.Add("LeakUpperLimit", "LeakUpperLimit")
            tableMapping.ColumnMappings.Add("LeakMassFlowRate", "LeakMassFlowRate")
            tableMapping.ColumnMappings.Add("LeakSetpoint", "LeakSetpoint")
            tableMapping.ColumnMappings.Add("LeakPressure", "LeakPressure")
            tableMapping.ColumnMappings.Add("LeakPartPresT0", "LeakPartPresT0")
            tableMapping.ColumnMappings.Add("LeakPartTempT0", "LeakPartTempT0")
            tableMapping.ColumnMappings.Add("LeakPartPresT1", "LeakPartPresT1")
            tableMapping.ColumnMappings.Add("LeakPartTempT1", "LeakPartTempT1")
            tableMapping.ColumnMappings.Add("LeakDecayTime", "LeakDecayTime")
            tableMapping.ColumnMappings.Add("RestIPSetpoint", "RestIPSetpoint")
            tableMapping.ColumnMappings.Add("RestPartPresDP", "RestPartPresDP")
            tableMapping.ColumnMappings.Add("CFVPartPresInitial", "CFVPartPresInitial")
            tableMapping.ColumnMappings.Add("CFVPartPresFinal", "CFVPartPresFinal")
            tableMapping.ColumnMappings.Add("CFVDecayTime", "CFVDecayTime")
            tableMapping.ColumnMappings.Add("FC500PA", "FC500PA")
            tableMapping.ColumnMappings.Add("FC500PP", "FC500PP")
            tableMapping.ColumnMappings.Add("FC500TP", "FC500TP")
            tableMapping.ColumnMappings.Add("CustName", "CustName")
            tableMapping.ColumnMappings.Add("CustSite", "CustSite")
            tableMapping.ColumnMappings.Add("Frame", "Frame")
            tableMapping.ColumnMappings.Add("Tech", "Tech")
            tableMapping.ColumnMappings.Add("JobType", "JobType")
            tableMapping.ColumnMappings.Add("AsblyType", "AsblyType")
            tableMapping.ColumnMappings.Add("CmpntType", "CmpntType")
            tableMapping.ColumnMappings.Add("Covers", "Covers")
            tableMapping.ColumnMappings.Add("Condition", "Condition")
            tableMapping.ColumnMappings.Add("Position", "Position")
            tableMapping.ColumnMappings.Add("PressureUnits", "PressureUnits")
            tableMapping.ColumnMappings.Add("TemperatureUnits", "TemperatureUnits")
            tableMapping.ColumnMappings.Add("TestLocation", "TestLocation")
            tableMapping.ColumnMappings.Add("VendorCode", "VendorCode")
            tableMapping.ColumnMappings.Add("Drawing_GroupNumber", "Drawing_GroupNumber")
            tableMapping.ColumnMappings.Add("RevisionLevel", "RevisionLevel")
            tableMapping.ColumnMappings.Add("CalDate", "CalDate")
            tableMapping.ColumnMappings.Add("CalDueDate", "CalDueDate")
            tableMapping.ColumnMappings.Add("LeakInletMassFlowRate", "LeakInletMassFlowRate")
            tableMapping.ColumnMappings.Add("LeakInletPressTo", "LeakInletPressTo")
            tableMapping.ColumnMappings.Add("LeakInletTempTo", "LeakInletTempTo")
            tableMapping.ColumnMappings.Add("LeakInletPressTf", "LeakInletPressTf")
            tableMapping.ColumnMappings.Add("LeakInletTempTf", "LeakInletTempTf")
            tableMapping.ColumnMappings.Add("LeakInletLimit", "LeakInletLimit")
            tableMapping.ColumnMappings.Add("LeakInletValue", "LeakInletValue")
            tableMapping.ColumnMappings.Add("XducerZeros", "XducerZeros")
            tableMapping.ColumnMappings.Add("InletLeakStr", "InletLeakStr")
            tableMapping.ColumnMappings.Add("PartLeakStr", "PartLeakStr")
            tableMapping.ColumnMappings.Add("P3tapID", "P3tapID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `TestResults` (`SecSince1904`, `DateString`, `TimeString`, `BName`, `"& _ 
                "Type`, `PassFail`, `PartNumber`, `SerialNumber`, `OperationDescription`, `WorkOr"& _ 
                "derNumber`, `OperatorID`, `Units`, `TestFluid`, `TestMeasureType`, `Nominal`, `C"& _ 
                "FVPattern`, `SelectedCFVs`, `TestMeasureValue`, `TestMeasureUnits`, `UpperLimit`"& _ 
                ", `LowerLimit`, `MassFlowRate`, `MassFlowUnits`, `Setpoint`, `ActualSetpoint`, `"& _ 
                "SetpointUnits`, `PartPressure`, `PartTemp`, `Patm`, `InletPressure`, `InletTemp`"& _ 
                ", `P1`, `P2`, `WaterDensity`, `WaterTemp`, `ProbeReadings`, `ProbeID`, `ProbePF`"& _ 
                ", `MasterOffset`, `TestRunTime`, `PerDiffNom`, `STDMassFlowRate`, `PerDiffSTDMas"& _ 
                "sFlow`, `STDPressure`, `PerDiffSTDPressure`, `STDTestMeasure`, `PerDiffSTDTestMe"& _ 
                "asure`, `LeakTestMeasureValue`, `LeakUpperLimit`, `LeakMassFlowRate`, `LeakSetpo"& _ 
                "int`, `LeakPressure`, `LeakPartPresT0`, `LeakPartTempT0`, `LeakPartPresT1`, `Lea"& _ 
                "kPartTempT1`, `LeakDecayTime`, `RestIPSetpoint`, `RestPartPresDP`, `CFVPartPresI"& _ 
                "nitial`, `CFVPartPresFinal`, `CFVDecayTime`, `FC500PA`, `FC500PP`, `FC500TP`, `C"& _ 
                "ustName`, `CustSite`, `Frame`, `Tech`, `JobType`, `AsblyType`, `CmpntType`, `Cov"& _ 
                "ers`, `Condition`, `Position`, `PressureUnits`, `TemperatureUnits`, `TestLocatio"& _ 
                "n`, `VendorCode`, `Drawing_GroupNumber`, `RevisionLevel`, `CalDate`, `CalDueDate"& _ 
                "`, `LeakInletMassFlowRate`, `LeakInletPressTo`, `LeakInletTempTo`, `LeakInletPre"& _ 
                "ssTf`, `LeakInletTempTf`, `LeakInletLimit`, `LeakInletValue`, `XducerZeros`, `In"& _ 
                "letLeakStr`, `PartLeakStr`, `P3tapID`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SecSince1904", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SecSince1904", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DateString", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DateString", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TimeString", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TimeString", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Type", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Type", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PassFail", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PassFail", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PartNumber", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartNumber", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SerialNumber", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SerialNumber", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OperationDescription", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OperationDescription", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WorkOrderNumber", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WorkOrderNumber", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OperatorID", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OperatorID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Units", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Units", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TestFluid", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TestFluid", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TestMeasureType", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TestMeasureType", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Nominal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nominal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CFVPattern", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CFVPattern", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SelectedCFVs", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SelectedCFVs", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TestMeasureValue", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TestMeasureValue", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TestMeasureUnits", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TestMeasureUnits", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UpperLimit", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UpperLimit", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LowerLimit", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LowerLimit", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MassFlowRate", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MassFlowRate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MassFlowUnits", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MassFlowUnits", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Setpoint", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Setpoint", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ActualSetpoint", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ActualSetpoint", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SetpointUnits", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SetpointUnits", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PartPressure", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartPressure", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PartTemp", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartTemp", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Patm", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Patm", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("InletPressure", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InletPressure", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("InletTemp", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InletTemp", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("P1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("P2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WaterDensity", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WaterDensity", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WaterTemp", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WaterTemp", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ProbeReadings", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProbeReadings", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ProbeID", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProbeID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ProbePF", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProbePF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MasterOffset", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MasterOffset", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TestRunTime", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TestRunTime", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PerDiffNom", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PerDiffNom", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STDMassFlowRate", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STDMassFlowRate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PerDiffSTDMassFlow", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PerDiffSTDMassFlow", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STDPressure", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STDPressure", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PerDiffSTDPressure", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PerDiffSTDPressure", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STDTestMeasure", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STDTestMeasure", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PerDiffSTDTestMeasure", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PerDiffSTDTestMeasure", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakTestMeasureValue", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakTestMeasureValue", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakUpperLimit", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakUpperLimit", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakMassFlowRate", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakMassFlowRate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakSetpoint", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakSetpoint", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakPressure", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakPressure", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakPartPresT0", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakPartPresT0", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakPartTempT0", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakPartTempT0", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakPartPresT1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakPartPresT1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakPartTempT1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakPartTempT1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakDecayTime", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakDecayTime", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RestIPSetpoint", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RestIPSetpoint", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RestPartPresDP", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RestPartPresDP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CFVPartPresInitial", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CFVPartPresInitial", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CFVPartPresFinal", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CFVPartPresFinal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CFVDecayTime", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CFVDecayTime", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FC500PA", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FC500PA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FC500PP", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FC500PP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FC500TP", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FC500TP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CustName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CustSite", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CustSite", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Frame", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Frame", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Tech", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Tech", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("JobType", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "JobType", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AsblyType", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AsblyType", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CmpntType", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CmpntType", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Covers", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Covers", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Condition", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Condition", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Position", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Position", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PressureUnits", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PressureUnits", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TemperatureUnits", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TemperatureUnits", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TestLocation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TestLocation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("VendorCode", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VendorCode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Drawing_GroupNumber", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Drawing_GroupNumber", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RevisionLevel", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RevisionLevel", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CalDate", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CalDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CalDueDate", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CalDueDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakInletMassFlowRate", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakInletMassFlowRate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakInletPressTo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakInletPressTo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakInletTempTo", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakInletTempTo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakInletPressTf", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakInletPressTf", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakInletTempTf", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakInletTempTf", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakInletLimit", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakInletLimit", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LeakInletValue", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LeakInletValue", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("XducerZeros", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "XducerZeros", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("InletLeakStr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InletLeakStr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PartLeakStr", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartLeakStr", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("P3tapID", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "P3tapID", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.UCRMS.My.MySettings.Default.ConString6610Flow
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SecSince1904, DateString, TimeString, BName, Type, PassFail, PartNumber, S"& _ 
                "erialNumber, OperationDescription, WorkOrderNumber, OperatorID, Units, TestFluid"& _ 
                ", TestMeasureType, Nominal, CFVPattern, SelectedCFVs, TestMeasureValue, TestMeas"& _ 
                "ureUnits, UpperLimit, LowerLimit, MassFlowRate, MassFlowUnits, Setpoint, ActualS"& _ 
                "etpoint, SetpointUnits, PartPressure, PartTemp, Patm, InletPressure, InletTemp, "& _ 
                "P1, P2, WaterDensity, WaterTemp, ProbeReadings, ProbeID, ProbePF, MasterOffset, "& _ 
                "TestRunTime, PerDiffNom, STDMassFlowRate, PerDiffSTDMassFlow, STDPressure, PerDi"& _ 
                "ffSTDPressure, STDTestMeasure, PerDiffSTDTestMeasure, LeakTestMeasureValue, Leak"& _ 
                "UpperLimit, LeakMassFlowRate, LeakSetpoint, LeakPressure, LeakPartPresT0, LeakPa"& _ 
                "rtTempT0, LeakPartPresT1, LeakPartTempT1, LeakDecayTime, RestIPSetpoint, RestPar"& _ 
                "tPresDP, CFVPartPresInitial, CFVPartPresFinal, CFVDecayTime, FC500PA, FC500PP, F"& _ 
                "C500TP, CustName, CustSite, Frame, Tech, JobType, AsblyType, CmpntType, Covers, "& _ 
                "Condition, [Position], PressureUnits, TemperatureUnits, TestLocation, VendorCode"& _ 
                ", Drawing_GroupNumber, RevisionLevel, CalDate, CalDueDate, LeakInletMassFlowRate"& _ 
                ", LeakInletPressTo, LeakInletTempTo, LeakInletPressTf, LeakInletTempTf, LeakInle"& _ 
                "tLimit, LeakInletValue, XducerZeros, InletLeakStr, PartLeakStr, P3tapID FROM Tes"& _ 
                "tResults"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ds_Airflow6610.TestResultsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ds_Airflow6610.TestResultsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ds_Airflow6610.TestResultsDataTable = New ds_Airflow6610.TestResultsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ds_Airflow6610.TestResultsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ds_Airflow6610) As Integer
            Return Me.Adapter.Update(dataSet, "TestResults")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal SecSince1904 As Global.System.Nullable(Of Double),  _
                    ByVal DateString As String,  _
                    ByVal TimeString As String,  _
                    ByVal BName As String,  _
                    ByVal Type As String,  _
                    ByVal PassFail As String,  _
                    ByVal PartNumber As String,  _
                    ByVal SerialNumber As String,  _
                    ByVal OperationDescription As String,  _
                    ByVal WorkOrderNumber As String,  _
                    ByVal OperatorID As String,  _
                    ByVal Units As String,  _
                    ByVal TestFluid As String,  _
                    ByVal TestMeasureType As String,  _
                    ByVal Nominal As Global.System.Nullable(Of Double),  _
                    ByVal CFVPattern As Global.System.Nullable(Of Integer),  _
                    ByVal SelectedCFVs As String,  _
                    ByVal TestMeasureValue As Global.System.Nullable(Of Double),  _
                    ByVal TestMeasureUnits As String,  _
                    ByVal UpperLimit As Global.System.Nullable(Of Double),  _
                    ByVal LowerLimit As Global.System.Nullable(Of Double),  _
                    ByVal MassFlowRate As Global.System.Nullable(Of Double),  _
                    ByVal MassFlowUnits As String,  _
                    ByVal Setpoint As Global.System.Nullable(Of Double),  _
                    ByVal ActualSetpoint As Global.System.Nullable(Of Double),  _
                    ByVal SetpointUnits As String,  _
                    ByVal PartPressure As Global.System.Nullable(Of Double),  _
                    ByVal PartTemp As Global.System.Nullable(Of Double),  _
                    ByVal Patm As Global.System.Nullable(Of Double),  _
                    ByVal InletPressure As Global.System.Nullable(Of Double),  _
                    ByVal InletTemp As Global.System.Nullable(Of Double),  _
                    ByVal P1 As Global.System.Nullable(Of Double),  _
                    ByVal P2 As Global.System.Nullable(Of Double),  _
                    ByVal WaterDensity As Global.System.Nullable(Of Double),  _
                    ByVal WaterTemp As Global.System.Nullable(Of Double),  _
                    ByVal ProbeReadings As String,  _
                    ByVal ProbeID As String,  _
                    ByVal ProbePF As String,  _
                    ByVal MasterOffset As Global.System.Nullable(Of Double),  _
                    ByVal TestRunTime As Global.System.Nullable(Of Double),  _
                    ByVal PerDiffNom As Global.System.Nullable(Of Double),  _
                    ByVal STDMassFlowRate As Global.System.Nullable(Of Double),  _
                    ByVal PerDiffSTDMassFlow As Global.System.Nullable(Of Double),  _
                    ByVal STDPressure As Global.System.Nullable(Of Double),  _
                    ByVal PerDiffSTDPressure As Global.System.Nullable(Of Double),  _
                    ByVal STDTestMeasure As Global.System.Nullable(Of Double),  _
                    ByVal PerDiffSTDTestMeasure As Global.System.Nullable(Of Double),  _
                    ByVal LeakTestMeasureValue As Global.System.Nullable(Of Double),  _
                    ByVal LeakUpperLimit As Global.System.Nullable(Of Double),  _
                    ByVal LeakMassFlowRate As Global.System.Nullable(Of Double),  _
                    ByVal LeakSetpoint As Global.System.Nullable(Of Double),  _
                    ByVal LeakPressure As Global.System.Nullable(Of Double),  _
                    ByVal LeakPartPresT0 As Global.System.Nullable(Of Double),  _
                    ByVal LeakPartTempT0 As Global.System.Nullable(Of Double),  _
                    ByVal LeakPartPresT1 As Global.System.Nullable(Of Double),  _
                    ByVal LeakPartTempT1 As Global.System.Nullable(Of Double),  _
                    ByVal LeakDecayTime As Global.System.Nullable(Of Double),  _
                    ByVal RestIPSetpoint As Global.System.Nullable(Of Double),  _
                    ByVal RestPartPresDP As Global.System.Nullable(Of Double),  _
                    ByVal CFVPartPresInitial As Global.System.Nullable(Of Double),  _
                    ByVal CFVPartPresFinal As Global.System.Nullable(Of Double),  _
                    ByVal CFVDecayTime As Global.System.Nullable(Of Double),  _
                    ByVal FC500PA As Global.System.Nullable(Of Double),  _
                    ByVal FC500PP As Global.System.Nullable(Of Double),  _
                    ByVal FC500TP As Global.System.Nullable(Of Double),  _
                    ByVal CustName As String,  _
                    ByVal CustSite As String,  _
                    ByVal Frame As String,  _
                    ByVal Tech As String,  _
                    ByVal JobType As String,  _
                    ByVal AsblyType As String,  _
                    ByVal CmpntType As String,  _
                    ByVal Covers As String,  _
                    ByVal Condition As String,  _
                    ByVal Position As String,  _
                    ByVal PressureUnits As String,  _
                    ByVal TemperatureUnits As String,  _
                    ByVal TestLocation As String,  _
                    ByVal VendorCode As String,  _
                    ByVal Drawing_GroupNumber As String,  _
                    ByVal RevisionLevel As String,  _
                    ByVal CalDate As String,  _
                    ByVal CalDueDate As String,  _
                    ByVal LeakInletMassFlowRate As Global.System.Nullable(Of Double),  _
                    ByVal LeakInletPressTo As Global.System.Nullable(Of Double),  _
                    ByVal LeakInletTempTo As Global.System.Nullable(Of Double),  _
                    ByVal LeakInletPressTf As Global.System.Nullable(Of Double),  _
                    ByVal LeakInletTempTf As Global.System.Nullable(Of Double),  _
                    ByVal LeakInletLimit As Global.System.Nullable(Of Double),  _
                    ByVal LeakInletValue As Global.System.Nullable(Of Double),  _
                    ByVal XducerZeros As String,  _
                    ByVal InletLeakStr As String,  _
                    ByVal PartLeakStr As String,  _
                    ByVal P3tapID As Global.System.Nullable(Of Double)) As Integer
            If (SecSince1904.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SecSince1904.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DateString Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateString,String)
            End If
            If (TimeString Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TimeString,String)
            End If
            If (BName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(BName,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Type,String)
            End If
            If (PassFail Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PassFail,String)
            End If
            If (PartNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PartNumber,String)
            End If
            If (SerialNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SerialNumber,String)
            End If
            If (OperationDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(OperationDescription,String)
            End If
            If (WorkOrderNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(WorkOrderNumber,String)
            End If
            If (OperatorID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(OperatorID,String)
            End If
            If (Units Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Units,String)
            End If
            If (TestFluid Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(TestFluid,String)
            End If
            If (TestMeasureType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(TestMeasureType,String)
            End If
            If (Nominal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Nominal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (CFVPattern.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CFVPattern.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (SelectedCFVs Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(SelectedCFVs,String)
            End If
            If (TestMeasureValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TestMeasureValue.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (TestMeasureUnits Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(TestMeasureUnits,String)
            End If
            If (UpperLimit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(UpperLimit.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (LowerLimit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(LowerLimit.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (MassFlowRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(MassFlowRate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MassFlowUnits Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(MassFlowUnits,String)
            End If
            If (Setpoint.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Setpoint.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (ActualSetpoint.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(ActualSetpoint.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (SetpointUnits Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(SetpointUnits,String)
            End If
            If (PartPressure.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(PartPressure.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (PartTemp.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(PartTemp.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Patm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Patm.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (InletPressure.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(InletPressure.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (InletTemp.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(InletTemp.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (P1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(P1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (P2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(P2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (WaterDensity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(WaterDensity.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (WaterTemp.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(WaterTemp.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (ProbeReadings Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(ProbeReadings,String)
            End If
            If (ProbeID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(ProbeID,String)
            End If
            If (ProbePF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(ProbePF,String)
            End If
            If (MasterOffset.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(MasterOffset.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (TestRunTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(TestRunTime.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (PerDiffNom.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(PerDiffNom.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (STDMassFlowRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(STDMassFlowRate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (PerDiffSTDMassFlow.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(PerDiffSTDMassFlow.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (STDPressure.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(STDPressure.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (PerDiffSTDPressure.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(PerDiffSTDPressure.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (STDTestMeasure.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(STDTestMeasure.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (PerDiffSTDTestMeasure.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(PerDiffSTDTestMeasure.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (LeakTestMeasureValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(LeakTestMeasureValue.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (LeakUpperLimit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(LeakUpperLimit.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (LeakMassFlowRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(LeakMassFlowRate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (LeakSetpoint.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(LeakSetpoint.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (LeakPressure.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(LeakPressure.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (LeakPartPresT0.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(LeakPartPresT0.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (LeakPartTempT0.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(LeakPartTempT0.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (LeakPartPresT1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(LeakPartPresT1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (LeakPartTempT1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(LeakPartTempT1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (LeakDecayTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(LeakDecayTime.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (RestIPSetpoint.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(RestIPSetpoint.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (RestPartPresDP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(RestPartPresDP.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (CFVPartPresInitial.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(CFVPartPresInitial.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (CFVPartPresFinal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(CFVPartPresFinal.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (CFVDecayTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(CFVDecayTime.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (FC500PA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(FC500PA.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (FC500PP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(FC500PP.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (FC500TP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(FC500TP.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (CustName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(CustName,String)
            End If
            If (CustSite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(CustSite,String)
            End If
            If (Frame Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(Frame,String)
            End If
            If (Tech Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(Tech,String)
            End If
            If (JobType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(JobType,String)
            End If
            If (AsblyType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(AsblyType,String)
            End If
            If (CmpntType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(CmpntType,String)
            End If
            If (Covers Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(Covers,String)
            End If
            If (Condition Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(Condition,String)
            End If
            If (Position Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(Position,String)
            End If
            If (PressureUnits Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(PressureUnits,String)
            End If
            If (TemperatureUnits Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(76).Value = CType(TemperatureUnits,String)
            End If
            If (TestLocation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(77).Value = CType(TestLocation,String)
            End If
            If (VendorCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(78).Value = CType(VendorCode,String)
            End If
            If (Drawing_GroupNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(79).Value = CType(Drawing_GroupNumber,String)
            End If
            If (RevisionLevel Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(80).Value = CType(RevisionLevel,String)
            End If
            If (CalDate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(81).Value = CType(CalDate,String)
            End If
            If (CalDueDate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(82).Value = CType(CalDueDate,String)
            End If
            If (LeakInletMassFlowRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(83).Value = CType(LeakInletMassFlowRate.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (LeakInletPressTo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(84).Value = CType(LeakInletPressTo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (LeakInletTempTo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(85).Value = CType(LeakInletTempTo.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (LeakInletPressTf.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(86).Value = CType(LeakInletPressTf.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (LeakInletTempTf.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(87).Value = CType(LeakInletTempTf.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (LeakInletLimit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(88).Value = CType(LeakInletLimit.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (LeakInletValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(89).Value = CType(LeakInletValue.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(89).Value = Global.System.DBNull.Value
            End If
            If (XducerZeros Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(90).Value = CType(XducerZeros,String)
            End If
            If (InletLeakStr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(91).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(91).Value = CType(InletLeakStr,String)
            End If
            If (PartLeakStr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(92).Value = CType(PartLeakStr,String)
            End If
            If (P3tapID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(93).Value = CType(P3tapID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _testResultsTableAdapter As TestResultsTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TestResultsTableAdapter() As TestResultsTableAdapter
            Get
                Return Me._testResultsTableAdapter
            End Get
            Set
                Me._testResultsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._testResultsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._testResultsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._testResultsTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._testResultsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As ds_Airflow6610, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._testResultsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TestResults.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._testResultsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As ds_Airflow6610, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._testResultsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TestResults.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._testResultsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As ds_Airflow6610, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._testResultsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TestResults.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._testResultsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As ds_Airflow6610) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._testResultsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._testResultsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._testResultsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._testResultsTableAdapter, Me._testResultsTableAdapter.Connection)
                    Me._testResultsTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._testResultsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._testResultsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._testResultsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._testResultsTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._testResultsTableAdapter) Is Nothing) Then
                    Me._testResultsTableAdapter.Connection = CType(revertConnections(Me._testResultsTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._testResultsTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
